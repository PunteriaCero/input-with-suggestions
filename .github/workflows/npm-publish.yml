# This workflow will run tests using node and then publish a package to GitHub Packages when a release is created
# For more information see: https://docs.github.com/en/actions/publishing-packages/publishing-nodejs-packages

name: Node.js Package

on:
  workflow_dispatch:
    inputs:
      example_input:
        description: 'An example input'
        required: false
        default: 'default_value'
  release:
    types: [created]
  

jobs:
  publish-npm:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.11.1'  # Updated to a compatible Node.js version
          registry-url: 'https://registry.npmjs.org/'
          
      - name: Update package.json for compatible Angular version
        run: |
          node -e '
            const fs = require("fs");
            const pkg = JSON.parse(fs.readFileSync("package.json", "utf8"));
            
            // Update all devDependencies to use Angular 14
            pkg.devDependencies["@angular/cli"] = "14.2.0";
            pkg.devDependencies["@angular/compiler"] = "14.2.0";
            pkg.devDependencies["@angular/compiler-cli"] = "14.2.0";
            pkg.devDependencies["@angular/core"] = "14.2.0";
            pkg.devDependencies["@angular/common"] = "14.2.0";
            pkg.devDependencies["@angular/platform-browser"] = "14.2.0";
            pkg.devDependencies["@angular/platform-browser-dynamic"] = "14.2.0";
            pkg.devDependencies["@angular/router"] = "14.2.0";
            pkg.devDependencies["@angular/forms"] = "14.2.0";
            pkg.devDependencies["@angular-devkit/build-angular"] = "14.2.0";
            pkg.devDependencies["ng-packagr"] = "14.2.0"; // Pin to version 14.2.0
            pkg.devDependencies["typescript"] = "~4.6.4";
            pkg.devDependencies["@angular/compiler"] = "14.2.0";
            // Update peerDependencies
            pkg.peerDependencies["@angular/core"] = "^14.0.0";
            pkg.peerDependencies["@angular/common"] = "^14.0.0";
            pkg.peerDependencies["@angular/forms"] = "^14.0.0";
            
            pkg.devDependencies["@angular/compiler-cli"] = "14.2.0";
            pkg.devDependencies["@angular/core"] = "14.2.0";
            pkg.devDependencies["@angular/common"] = "14.2.0";
            pkg.devDependencies["@angular/platform-browser"] = "14.2.0";
            pkg.devDependencies["@angular/platform-browser-dynamic"] = "14.2.0";
            pkg.devDependencies["@angular/router"] = "14.2.0";
            pkg.devDependencies["@angular/forms"] = "14.2.0";
            pkg.devDependencies["@angular-devkit/build-angular"] = "14.2.0";
            pkg.devDependencies["ng-packagr"] = "14.2.0"; // Pin to version 14.2.0
            pkg.devDependencies["typescript"] = "~4.6.4";
            
            // Update peerDependencies
            pkg.peerDependencies["@angular/core"] = "^14.0.0";
            pkg.peerDependencies["@angular/common"] = "^14.0.0";
            pkg.peerDependencies["@angular/forms"] = "^14.0.0";
            
            fs.writeFileSync("package.json", JSON.stringify(pkg, null, 2));
          '
      
      - name: Generate new package-lock.json
        run: npm install --package-lock-only --legacy-peer-deps
      
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
      
      - name: Install Angular CLI globally and build
        run: |
          npm install -g @angular/cli@14.2.0
          
          # Create necessary tsconfig files
          echo '{
            "compileOnSave": false,
            "compilerOptions": {
              "baseUrl": "./",
              "outDir": "./dist/out-tsc",
              "sourceMap": true,
              "declaration": false,
              "downlevelIteration": true,
              "experimentalDecorators": true,
              "module": "es2020",
              "moduleResolution": "node",
              "importHelpers": true,
              "target": "es2015",
              "typeRoots": [
                "node_modules/@types"
              ],
              "lib": [
                "es2018",
                "dom"
              ],
              "skipLibCheck": true
            },
            "angularCompilerOptions": {
              "enableI18nLegacyMessageIdFormat": false,
              "strictInjectionParameters": true,
              "strictInputAccessModifiers": true,
              "strictTemplates": true
            }
          }' > tsconfig.json
          
          echo '{
            "extends": "./tsconfig.json",
            "compilerOptions": {
              "outDir": "./out-tsc/lib",
              "declaration": true,
              "declarationMap": true,
              "inlineSources": true,
              "types": []
            },
            "exclude": [
              "src/test.ts",
              "**/*.spec.ts"
            ]
          }' > tsconfig.lib.json
          
          echo '{
            "extends": "./tsconfig.lib.json",
            "compilerOptions": {
              "declarationMap": false
            },
            "angularCompilerOptions": {
              "compilationMode": "partial"
            }
          }' > tsconfig.lib.prod.json
          
          # Create angular.json if missing
          echo '{
            "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
            "version": 1,
            "newProjectRoot": "projects",
            "projects": {
              "input-with-suggestions-lib": {
                "projectType": "library",
                "root": ".",
                "sourceRoot": "lib",
                "prefix": "lib",
                "architect": {
                  "build": {
                    "builder": "@angular-devkit/build-angular:ng-packagr",
                    "options": {
                      "project": "ng-package.json"
                    },
                    "configurations": {
                      "production": {
                        "tsConfig": "tsconfig.lib.prod.json"
                      },
                      "development": {
                        "tsConfig": "tsconfig.lib.json"
                      }
                    },
                    "defaultConfiguration": "production"
                  }
                }
              }
            }
          }' > angular.json
          
          # Now run the build
          npx ng build input-with-suggestions-lib

      - name: Set Global Git Config
        run: |
          git config --global user.email "mcodesido@baufest.com"
          git config --global user.name "Mateo Codesido"
          # Install dependencies with specific flags for compatibility
          npm install --legacy-peer-deps
        run: rm -rf node_modules package-lock.json
        
      - name: Build library directly
        run: |
          # Remove the problematic dependency
          node -e '
            const fs = require("fs");
            const pkg = JSON.parse(fs.readFileSync("package.json", "utf8"));
            delete pkg.devDependencies["@angular-devkit/build-ng-packagr"];
            fs.writeFileSync("package.json", JSON.stringify(pkg, null, 2));
          '
          
          # Install dependencies with legacy peer deps
          npm install --legacy-peer-deps
          
          # Create necessary tsconfig files if they don't exist
          if [ ! -f "tsconfig.json" ]; then
            echo '{
              "compileOnSave": false,
              "compilerOptions": {
                "baseUrl": "./",
                "outDir": "./dist/out-tsc",
                "sourceMap": true,
                "declaration": false,
                "downlevelIteration": true,
                "experimentalDecorators": true,
                "module": "es2020",
                "moduleResolution": "node",
                "importHelpers": true,
                "target": "es2015",
                "typeRoots": [
                  "node_modules/@types"
                ],
                "lib": [
                  "es2018",
                  "dom"
                ],
                "skipLibCheck": true
              },
              "angularCompilerOptions": {
                "enableI18nLegacyMessageIdFormat": false,
                "strictInjectionParameters": true,
                "strictInputAccessModifiers": true,
                "strictTemplates": true
              }
            }' > tsconfig.json
          fi

          if [ ! -f "tsconfig.lib.json" ]; then
            echo '{
              "extends": "./tsconfig.json",
              "compilerOptions": {
                "outDir": "./out-tsc/lib",
                "declaration": true,
                "declarationMap": true,
                "inlineSources": true,
                "types": []
              },
              "exclude": [
                "src/test.ts",
                "**/*.spec.ts"
              ]
            }' > tsconfig.lib.json
          fi

          if [ ! -f "tsconfig.lib.prod.json" ]; then
            echo '{
              "extends": "./tsconfig.lib.json",
              "compilerOptions": {
                "declarationMap": false
              },
              "angularCompilerOptions": {
                "compilationMode": "partial"
              }
            }' > tsconfig.lib.prod.json
          fi

          # Examine file structure
          echo "Current directory structure:"
          ls -la
          
          # Check if ng-package.json exists and display its contents
          if [ -f "ng-package.json" ]; then
            echo "Contents of ng-package.json:"
            cat ng-package.json
          else
            echo "ng-package.json not found in current directory"
            # Create a default ng-package.json if missing
            echo '{
              "$schema": "./node_modules/ng-packagr/ng-package.schema.json",
              "dest": "dist",
              "lib": {
                "entryFile": "public-api.ts"
              }
            }' > ng-package.json
            echo "Created default ng-package.json"
          fi
          
          # Update ng-package.json to use correct paths
          node -e '
            const fs = require("fs");
            const path = require("path");
            try {
              const ngPkg = JSON.parse(fs.readFileSync("ng-package.json", "utf8"));
              
              // Check current directory structure to find the right entry file
              let entryFile = "public-api.ts";
              if (fs.existsSync("lib") && fs.readdirSync("lib").length > 0) {
                entryFile = "lib/public-api.ts";
              } else if (fs.existsSync("src") && fs.readdirSync("src").length > 0) {
                entryFile = "src/public-api.ts";
              }
              
              // Update ng-package.json with correct configuration format
              const updatedConfig = {
                "$schema": "./node_modules/ng-packagr/ng-package.schema.json",
                "dest": "dist"
              };
              
              // Set the correct lib structure
              updatedConfig.lib = {
                "entryFile": entryFile
              };
              
              fs.writeFileSync("ng-package.json", JSON.stringify(updatedConfig, null, 2));
              console.log("Updated ng-package.json with entryFile:", entryFile);
            } catch (error) {
              console.error("Error updating ng-package.json:", error);
            }
          '

          # Show the updated configuration
          echo "Updated ng-package.json:"
          cat ng-package.json
          
          # Build using ng-packagr directly
          npx ng-packagr -p ng-package.json --no-ngcc

      - name: Build
        run: npm run build

      - name: Publish Package
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{secrets.npm_token}}
